import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as l,a as e}from"./app-DMwitqrB.js";const a={},n=e(`<h2 id="html-部分" tabindex="-1"><a class="header-anchor" href="#html-部分"><span>HTML 部分</span></a></h2><h3 id="前端需要注意哪些-seo-search-engine-optimization" tabindex="-1"><a class="header-anchor" href="#前端需要注意哪些-seo-search-engine-optimization"><span>前端需要注意哪些 SEO(Search Engine Optimization)</span></a></h3><ul><li>合理的 <code>title</code>, <code>description</code>, <code>keywords</code>: 搜索引擎对这几个的权重逐渐减少, <code>title</code> 值强调重点即可, 重要关键字出现不要超过两次, 且需要靠前, 不同页面的 <code>title</code> 要不同; <code>description</code> 把页面内容高度概括, 长度合适, 不可过分堆砌关键词, 不同页面的 <code>description</code> 要不同; <code>keywords</code> 列举出重要关键词即可</li><li>语义化的 <code>HTML</code> 代码, 符合 <code>W3C</code> 规范, 语义化代码让搜索引擎更容易理解网页</li><li>重要内容 <code>HTML</code> 代码放在最前: 搜索引擎抓取 <code>HTML</code> 顺序是从上往下, 有的搜索引擎对抓取的长度有限制, 保证重要的内容一定会被抓取</li><li>重要内容不要用 <code>js</code> 输出: 爬虫不会执行 <code>js</code> 获取内容</li><li>少用 <code>iframe</code>: 搜索引擎不会抓取 <code>iframe</code> 的内容</li><li>非装饰性图片必须要加 <code>alt</code></li><li>提高网站速度, 网站速度是搜索引擎排序的一个重要排序</li></ul><h3 id="的-title-和-alt-有什么区别" tabindex="-1"><a class="header-anchor" href="#的-title-和-alt-有什么区别"><span><img>的 title 和 alt 有什么区别</span></a></h3><ul><li><code>title</code> 通常是鼠标滑动到元素上显示</li><li><code>alt</code> 是 <code>&lt;img /&gt;</code> 元素的特有属性, 是图片内容的等价描述, 用于图片无法加载时显示, 读屏器阅读图片. 可提图片高访问性, 除了纯装饰性图片外都必须设置有意义的值, 搜索引擎会重点分析</li></ul><h3 id="http-的几种请求方法用途" tabindex="-1"><a class="header-anchor" href="#http-的几种请求方法用途"><span>HTTP 的几种请求方法用途</span></a></h3><ul><li><code>GET</code>: 发送一个请求获取服务器上的某一资源</li><li><code>POST</code>: 向 <code>URL</code> 指定的资源提交数据或者添加数据</li><li><code>PUT</code>: 和 <code>POST</code> 一样也是向服务器提交数据, 不同的是, <code>PUT</code> 指定了资源在服务器上的位置</li><li><code>HEAD</code>: 只请求页面的首部</li><li><code>DELETE</code>: 删除服务器上某资源</li><li><code>OPTIONS</code>: 用于获取当前 <code>URL</code> 所支持的方法, 请求成功会返回一个 <code>Allow</code> 的头, 包含 <code>GET, POST</code> 这样的信息</li><li><code>TRACE</code>: <code>TRACE</code> 方法被用于激发一个远程的, 应用层的请求消息回路</li><li><code>CONNECT</code>: 把请求链接转到透明的 <code>TCP/IP</code> 通道</li></ul><h3 id="从浏览器地址栏输入-url-到显示页面的步骤" tabindex="-1"><a class="header-anchor" href="#从浏览器地址栏输入-url-到显示页面的步骤"><span>从浏览器地址栏输入 url 到显示页面的步骤</span></a></h3><ul><li>基础版本 <ol><li>浏览器根据请求的 <code>URL</code> 交给 <code>DNS</code> 域名解析, 找到真实的 <code>IP</code>, 向服务器发起请求</li><li>服务器交给后台处理完成后返回数据, 浏览器接收文件 (<code>HTML, CSS, JS, 图像等</code>)</li><li>浏览器对接收到的资源 (<code>HTML, CSS, JS</code>) 进行语法解析, 建立相应的内部数据结构</li><li>载入解析到的资源文件, 渲染页面</li></ol></li><li>详细版本 <ol><li>在浏览器地址栏输入 <code>URL</code></li><li>浏览器查看缓存, 如果请求资源在缓存中, 并且新鲜, 跳转到转码步骤 <ol><li>如果资源未缓存, 则重新发起请求</li><li>如果已经缓存, 且未过期, 则直接返回客户端, 否则重新发起请求</li></ol></li><li>浏览器解析 <code>URL</code> 获取协议</li><li>浏览器组装一个 <code>GET</code> 请求</li><li>浏览器获取主机 <code>IP</code> 地址</li></ol></li></ul><h3 id="http-状态码及其含义" tabindex="-1"><a class="header-anchor" href="#http-状态码及其含义"><span>HTTP 状态码及其含义</span></a></h3><ul><li>1xx 信息状态吗 <ol><li><code>100 Continue</code> 继续, 一般在发送 post 请求时, 已发送了 http header 之后服务端将返回此信息, 表示确认, 之后发送具体参数信息</li></ol></li><li>2xx 成功状态码 <ol><li><code>200 ok</code> 正常返回信息</li><li><code>201 Created</code> 请求成功并且服务器创建了新的资源</li><li><code>202 Accepted</code> 服务器已接受请求, 但尚未处理</li></ol></li><li>3xx 重定向 <ol><li><code>301 Moved Permanently</code> 请求的网页已永久移动到新位置</li><li><code>302 Found</code> 临时性重定向</li><li><code>303 See Other</code> 临时性重定向, 且总是使用 <code>GET</code> 请求新的 <code>URI</code></li><li><code>304 Not Modified</code> 自从上次请求后, 请求的网页未修改过</li></ol></li><li>4xx 客户端错误 <ol><li><code>400 Bad Request</code> 服务器无法理解请求的格式, 客户端不应当尝试再次使用相同的内容发起请求</li><li><code>401 Unauthorized</code> 请求未授权</li><li><code>403 Forbidden</code> 禁止访问</li><li><code>404 Not Found</code> 找不到如何与 <code>URI</code> 相匹配的资源</li></ol></li><li>5xx 服务端错误 <ol><li><code>500 Internal Server Error</code> 最常见的服务器端错误</li><li><code>503 Service Unavailable</code> 服务器端暂时无法处理请求 (可能是过载或维护)</li></ol></li></ul><h3 id="语义化的理解" tabindex="-1"><a class="header-anchor" href="#语义化的理解"><span>语义化的理解</span></a></h3><ul><li>用正确的标签做正确的事</li><li><code>HTML</code> 标签的语义化就是让内容结构化, 方便浏览器, 搜索引擎解析</li><li>在没有 <code>CSS</code> 样式的情况也能展示出我们想要的样子</li><li>搜索引擎的爬虫依赖于标记来确认上下文的关键字的权重, 利于 <code>SEO</code></li><li>使阅读源代码的人对网站更容易将网站分块, 便于阅读维护理解</li></ul><h3 id="介绍一下你对浏览器内核的理解" tabindex="-1"><a class="header-anchor" href="#介绍一下你对浏览器内核的理解"><span>介绍一下你对浏览器内核的理解</span></a></h3><ul><li>主要分为两部分, 渲染引擎和 <code>JS</code> 引擎</li><li>渲染引擎: 负责取得网页的内容 (HTML、XML、图像等等) 、整理讯息 (例如加入 CSS 等) , 以及计算网页的显示方式, 然后会输出至显示器或打印机。浏览器的内核的不同对于网页的语法解释会有不同, 所以渲染的效果也不相同。所有网页浏览器、电子邮件客户端以及其它需要编辑、显示网络内容的应用程序都需要内核</li><li>JS 引擎则: 解析和执行 <code>javascript</code> 来实现网页的动态效果</li></ul><p><strong>常见的浏览器内核有哪些</strong></p><ul><li>Trident 内核: <code>IE</code>, <code>360</code></li><li>Gecko 内核: <code>FireFox</code></li><li>Presto 内核: <code>Opera7</code></li><li>Webkit 内核: <code>Safari</code>, <code>Chrome</code></li></ul><h3 id="html5-有哪些新特性、移除了那些元素" tabindex="-1"><a class="header-anchor" href="#html5-有哪些新特性、移除了那些元素"><span>html5 有哪些新特性、移除了那些元素</span></a></h3><p><strong>新增</strong></p><ul><li>新增选择器 <code>document.querySelector</code>、<code>document.querySelectorAll</code></li><li>拖拽释放(<code>Drag and drop</code>) API</li><li>媒体播放的 <code>video</code> 和 <code>audio</code></li><li>本地存储 <code>localStorage</code> 和 <code>sessionStorage</code></li><li>语意化标签 <code>article、footer、header、nav、section</code></li><li>增强表单控件 <code>calendar、date、time、email、url、search</code></li><li>多任务 <code>webworker</code></li><li>全双工通信协议 <code>websocket</code></li><li>历史管理 <code>history</code></li><li>跨域资源共享(CORS) <code>Access-Control-Allow-Origin</code></li><li>跨窗口通信 <code>PostMessage</code></li></ul><p><strong>移除</strong></p><ul><li>纯表现的元素: <code>basefont、big、center、font、 s、strike、tt、u</code></li><li>对可用性产生负面影响的元素: <code>frame、frameset、noframes</code></li></ul><h3 id="请描述一下-cookies-sessionstorage-和-localstorage-的区别" tabindex="-1"><a class="header-anchor" href="#请描述一下-cookies-sessionstorage-和-localstorage-的区别"><span>请描述一下 cookies, sessionStorage 和 localStorage 的区别</span></a></h3><ul><li><code>cookie</code> 是网站为了标示用户身份而储存在用户本地终端 (Client Side) 上的数据 (通常经过加密)</li><li><code>cookie</code> 数据始终在同源的 <code>http</code> 请求中携带 (即使不需要) , 仅会在浏览器和服务器间来回传递</li><li><code>sessionStorage</code> 和 <code>localStorage</code> 不会自动把数据发给服务器, 仅在本地保存</li><li><code>cookie</code> 数据大小不能超过 4k</li><li><code>sessionStorage</code> 和 <code>localStorage</code> 虽然也有存储大小的限制, 但比 <code>cookie</code> 大得多, 可以达到 5M 或更大</li><li><code>localStorage</code> 存储持久数据, 浏览器关闭后数据不丢失除非主动删除数据</li><li><code>sessionStorage</code> 数据在当前浏览器窗口关闭后自动删除</li><li><code>cookie</code> 设置的 <code>cookie</code> 过期时间之前一直有效, 即使窗口或浏览器关闭</li></ul><h3 id="iframe-有那些缺点" tabindex="-1"><a class="header-anchor" href="#iframe-有那些缺点"><span>iframe 有那些缺点</span></a></h3><ul><li><code>iframe</code> 会阻塞主页面的 <code>onload</code> 事件</li><li>搜索引擎的检索程序无法解读这种页面, 不利于 <code>SEO</code></li><li><code>iframe</code> 和主页面共享连接池, 而浏览器对相同域的连接有限制, 所以会影响页面的并行加载</li><li>使用 <code>iframe</code> 之前需要考虑这两个缺点。如果需要使用 <code>iframe</code>, 最好是通过 <code>javascript</code> 动态给 <code>iframe</code> 添加 <code>src</code> 属性值, 这样可以绕开以上两个问题</li></ul><h3 id="web-标准以及-w3c-标准是什么" tabindex="-1"><a class="header-anchor" href="#web-标准以及-w3c-标准是什么"><span>WEB 标准以及 W3C 标准是什么?</span></a></h3><ul><li>标签闭合、标签小写、不乱嵌套、使用外链 css 和 js、结构行为表现的分离</li></ul><h3 id="xhtml-和-html-有什么区别" tabindex="-1"><a class="header-anchor" href="#xhtml-和-html-有什么区别"><span>xhtml 和 html 有什么区别</span></a></h3><ul><li>一个是功能上的差别 主要是 <code>XHTML</code> 可兼容各大浏览器、手机以及 PDA, 并且浏览器也能快速正确地编译网页</li><li>另外是书写习惯的差别 <code>XHTML</code> 元素必须被正确地嵌套, 闭合, 区分大小写, 文档必须拥有根元素</li></ul><h3 id="行内元素有哪些-块级元素有哪些-空-void-元素有那些-行内元素和块级元素有什么区别" tabindex="-1"><a class="header-anchor" href="#行内元素有哪些-块级元素有哪些-空-void-元素有那些-行内元素和块级元素有什么区别"><span>行内元素有哪些？块级元素有哪些？ 空(void)元素有那些？行内元素和块级元素有什么区别？</span></a></h3><ul><li>行内元素有: a b span img input select strong</li><li>块级元素有: div ul ol li dl dt dd h1 h2 h3 h4 p</li><li>空元素: <br> <hr> <img> <input> <link> <meta></li><li>行内元素不可以设置宽高, 不独占一行</li><li>块级元素可以设置宽高, 独占一行</li></ul><h3 id="html-全局属性-global-attribute-有哪些" tabindex="-1"><a class="header-anchor" href="#html-全局属性-global-attribute-有哪些"><span>HTML 全局属性(global attribute)有哪些</span></a></h3><ul><li>class: 为元素设置类标识</li><li>data-*: 为元素增加自定义属性</li><li>draggable: 设置元素是否可拖拽</li><li>id: 元素 id, 文档内唯一</li><li>lang: 元素内容的的语言</li><li>style: 行内 css 样式</li><li>title: 元素相关的建议信息</li></ul><p>HTML5 为什么只需要写 </p><p>SGML (Standard Generalized Markup Language) 标准通用标记语言 DTD (Document Type Definition) 文档类型定义</p><ul><li><code>HTML5</code> 不基于 <code>SGML</code>, 因此不需要对 <code>DTD</code> 进行引用, 但是需要 <code>doctype</code> 来规范浏览器的行为</li><li>而 <code>HTML4.01</code> 基于 <code>SGML</code>,所以需要对 <code>DTD</code> 进行引用, 才能告知浏览器文档所使用的文档类型</li></ul><h3 id="viewport" tabindex="-1"><a class="header-anchor" href="#viewport"><span>viewport</span></a></h3><p>了解更多可以看<a href="https://juejin.cn/post/7003541926830047269" target="_blank" rel="noopener noreferrer">这篇文章</a></p><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" data-title="html" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">meta</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;">  name</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;viewport&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;">  content</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;width=device-width,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0,user-scalable=no&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">/&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">&lt;!--</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">width    设置viewport宽度, 为一个正整数, 或字符串‘device-width’</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">device-width  设备宽度</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">height   设置viewport高度, 一般设置了宽度, 会自动解析出高度, 可以不用设置</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">initial-scale    默认缩放比例 (初始缩放比例) , 为一个数字, 可以带小数</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">minimum-scale    允许用户最小缩放比例, 为一个数字, 可以带小数</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">maximum-scale    允许用户最大缩放比例, 为一个数字, 可以带小数</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">user-scalable    是否允许手动缩放</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">--&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>怎样处理 移动端 1px 被 渲染成 2px 问题</strong></p><ul><li>局部处理 meta 标签中的 viewport 属性 , <code>initial-scale</code> 设置为 1 rem 按照设计稿标准走, 外加利用 transform 的 <code>scale(0.5)</code> 缩小一倍即可</li><li>全局处理 mata 标签中的 viewport 属性 , <code>initial-scale</code> 设置为 0.5 rem 按照设计稿标准走即可</li></ul><h3 id="渲染优化" tabindex="-1"><a class="header-anchor" href="#渲染优化"><span>渲染优化</span></a></h3><ul><li>禁止使用 <code>iframe</code></li><li>禁止使用 <code>gif</code> 图片实现 <code>loading</code> 效果</li><li>使用 <code>CSS3</code> 代码代替 <code>JS</code> 动画(减少重排, 重绘)</li><li>对于一些小图标, 可以使用 <code>base64</code> 位编码, 以减少网络请求</li><li>页面头部的<code>style</code> <code>script</code> 会阻塞页面</li><li>页面中空的 href 和 src 会阻塞页面其他资源的加载 (阻塞下载进程)</li><li>网页 gzip, CDN 托管, data 缓存 , 图片服务器</li><li>当需要设置的样式很多时设置 <code>className</code> 而不是直接操作 <code>style</code></li><li>图片预加载, 将样式表放在顶部, 将脚本放在底部 加上时间戳</li></ul><h3 id="meta-viewport-相关" tabindex="-1"><a class="header-anchor" href="#meta-viewport-相关"><span>meta viewport 相关</span></a></h3><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" data-title="html" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;!</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">DOCTYPE</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;"> html</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">&lt;!--H5标准声明, 使用 HTML5 doctype, 不区分大小写--&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">html</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">head</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;"> lang</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;en&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    &lt;!--标准的 lang 属性写法--&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">meta</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;apple-mobile-web-app-status-bar-style&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;"> content</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;black&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">meta</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;format-detection&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;"> content</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;telphone=no, email=no&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    &lt;!--设置苹果工具栏颜色--&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">meta</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;renderer&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;"> content</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;webkit&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    &lt;!-- 启用360浏览器的极速模式(webkit)--&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">meta</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;"> http-equiv</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;X-UA-Compatible&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;"> content</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;IE=edge&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    &lt;!--避免IE使用兼容模式--&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">meta</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;"> http-equiv</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;Cache-Control&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;"> content</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;no-siteapp&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    &lt;!--不让百度转码--&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">meta</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;HandheldFriendly&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;"> content</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;true&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    &lt;!--针对手持设备优化, 主要是针对一些老的不识别viewport的浏览器, 比如黑莓--&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">meta</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;MobileOptimized&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;"> content</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;320&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    &lt;!--微软的老式浏览器--&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">meta</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;screen-orientation&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;"> content</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;portrait&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    &lt;!--uc强制竖屏--&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">meta</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;x5-orientation&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;"> content</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;portrait&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    &lt;!--QQ强制竖屏--&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">meta</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;full-screen&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;"> content</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;yes&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    &lt;!--UC强制全屏--&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">meta</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;x5-fullscreen&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;"> content</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;true&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    &lt;!--QQ强制全屏--&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">meta</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;browsermode&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;"> content</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;application&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    &lt;!--UC应用模式--&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">meta</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;x5-page-mode&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;"> content</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;app&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    &lt;!-- QQ应用模式--&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">meta</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;msapplication-tap-highlight&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;"> content</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;no&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    &lt;!--windows phone 点击无高亮</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    设置页面不缓存--&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">meta</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;"> http-equiv</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;pragma&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;"> content</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;no-cache&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">meta</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;"> http-equiv</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;cache-control&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;"> content</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;no-cache&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">meta</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;"> http-equiv</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;expires&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;"> content</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">head</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">html</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="div-css-的布局较-table-布局有什么优点" tabindex="-1"><a class="header-anchor" href="#div-css-的布局较-table-布局有什么优点"><span>div+css 的布局较 table 布局有什么优点</span></a></h3><ul><li>改版的时候更方便 只要改 css 文件</li><li>页面加载速度更快、结构化清晰、页面显示简洁</li><li>表现与结构相分离</li><li>易于优化 (seo) 搜索引擎更友好, 排名更容易靠前</li></ul><h3 id="strong-与-em-的异同" tabindex="-1"><a class="header-anchor" href="#strong-与-em-的异同"><span>strong 与 em 的异同</span></a></h3><ul><li>strong:粗体强调标签, 强调, 表示内容的重要性</li><li>em:斜体强调标签, 更强烈强调, 表示内容的强调点</li></ul><h3 id="你能描述一下渐进增强和优雅降级之间的不同吗" tabindex="-1"><a class="header-anchor" href="#你能描述一下渐进增强和优雅降级之间的不同吗"><span>你能描述一下渐进增强和优雅降级之间的不同吗</span></a></h3><ul><li>渐进增强: 针对低版本浏览器进行构建页面, 保证最基本的功能, 然后再针对高级浏览器进行效果、交互等改进和追加功能达到更好的用户体验</li><li>优雅降级: 一开始就构建完整的功能, 然后再针对低版本浏览器进行兼容</li></ul><blockquote><p>区别: 优雅降级是从复杂的现状开始, 并试图减少用户体验的供给, 而渐进增强则是从一个非常基础的, 能够起作用的版本开始, 并不断扩充, 以适应未来环境的需要。降级（功能衰减）意味着往回看；而渐进增强则意味着朝前看, 同时保证其根基处于安全地带</p></blockquote><h3 id="为什么利用多个域名来存储网站资源会更有效" tabindex="-1"><a class="header-anchor" href="#为什么利用多个域名来存储网站资源会更有效"><span>为什么利用多个域名来存储网站资源会更有效？</span></a></h3><ul><li>CDN 缓存更方便</li><li>突破浏览器并发限制</li><li>节约 cookie 带宽</li><li>节约主域名的连接数, 优化页面响应速度</li><li>防止不必要的安全问题</li></ul><h3 id="简述一下-src-与-href-的区别" tabindex="-1"><a class="header-anchor" href="#简述一下-src-与-href-的区别"><span>简述一下 src 与 href 的区别</span></a></h3><ul><li><code>src</code> 用于替换当前元素, <code>href</code> 用于在当前文档和引用资源之间确立联系</li><li><code>src</code> 是 <code>source</code> 的缩写, 指向外部资源的位置, 指向的内容将会嵌入到文档中当前标签所在位置；在请求 src 资源时会将其指向的资源下载并应用到文档内, 例如 <code>js</code> 脚本, <code>img</code> 图片</li><li><code>href</code> 是 <code>Hypertext Reference</code> 的缩写, 指向网络资源所在位置, 建立和当前元素（锚点）或当前文档（链接）之间的链接</li><li><code>&lt;link href=&quot;common.css&quot; rel=&quot;stylesheet&quot;/&gt;</code> 那么浏览器会识别该文档为 css 文件, 就会并行下载资源并且不会停止对当前文档的处理。这也是为什么建议使用 <code>link</code> 方式来加载 css, 而不是使用 <code>@import</code> 方式</li></ul><h3 id="一个页面上有大量的图片-大型电商网站-加载很慢-你有哪些方法优化这些图片的加载-给用户更好的体验" tabindex="-1"><a class="header-anchor" href="#一个页面上有大量的图片-大型电商网站-加载很慢-你有哪些方法优化这些图片的加载-给用户更好的体验"><span>一个页面上有大量的图片（大型电商网站）, 加载很慢, 你有哪些方法优化这些图片的加载, 给用户更好的体验</span></a></h3><ul><li>图片懒加载, 在页面上的未可视区域可以添加一个滚动事件, 判断图片位置与浏览器顶端的距离与页面的距离, 如果前者小于后者, 优先加载。</li><li>如果为幻灯片、相册等, 可以使用图片预加载技术, 将当前展示图片的前一张和后一张优先下载。</li><li>如果图片为 css 图片, 可以使用 CSSsprite, SVGsprite, Iconfont、Base64 等技术。</li><li>如果图片过大, 可以使用特殊编码的图片, 加载时会先加载一张压缩的特别厉害的缩略图, 以提高用户体验。</li><li>如果图片展示区域小于图片的真实大小, 则因在服务器端根据业务需要先行进行图片压缩, 图片压缩后大小与展示一致。</li></ul><h3 id="web-开发中会话跟踪的方法有哪些" tabindex="-1"><a class="header-anchor" href="#web-开发中会话跟踪的方法有哪些"><span>web 开发中会话跟踪的方法有哪些</span></a></h3><ul><li>cookie</li><li>session</li><li>url 重写</li><li>隐藏 input</li><li>ip 地址</li></ul><h3 id="http-request-报文结构是怎样的" tabindex="-1"><a class="header-anchor" href="#http-request-报文结构是怎样的"><span>HTTP request 报文结构是怎样的</span></a></h3><ul><li>首行是 Request-Line 包括: 请求方法, 请求 URI, 协议版本, CRLF</li><li>首行之后是若干行请求头, 包括 general-header, request-header 或者 entity-header, 每个一行以 CRLF 结束</li><li>请求头和消息实体之间有一个 CRLF 分隔</li><li>根据实际请求需要可能包含一个消息实体</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>GET /Protocols/rfc2616/rfc2616-sec5.html HTTP/1.1</span></span>
<span class="line"><span>Host: www.w3.org</span></span>
<span class="line"><span>Connection: keep-alive</span></span>
<span class="line"><span>Cache-Control: max-age=0</span></span>
<span class="line"><span>Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</span></span>
<span class="line"><span>User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/35.0.1916.153 Safari/537.36</span></span>
<span class="line"><span>Referer: https://www.google.com.hk/</span></span>
<span class="line"><span>Accept-Encoding: gzip,deflate,sdch</span></span>
<span class="line"><span>Accept-Language: zh-CN,zh;q=0.8,en;q=0.6</span></span>
<span class="line"><span>Cookie: authorstyle=yes</span></span>
<span class="line"><span>If-None-Match: &quot;2cc8-3e3073913b100&quot;</span></span>
<span class="line"><span>If-Modified-Since: Wed, 01 Sep 2004 13:24:52 GMT</span></span>
<span class="line"><span></span></span>
<span class="line"><span>name=qiu&amp;age=25</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="http-response-报文结构是怎样的" tabindex="-1"><a class="header-anchor" href="#http-response-报文结构是怎样的"><span>HTTP response 报文结构是怎样的</span></a></h3><ul><li>首行是状态行包括: HTTP 版本, 状态码, 状态描述, 后面跟一个 CRLF</li><li>首行之后是若干行响应头, 包括: 通用头部, 响应头部, 实体头部</li><li>响应头部和响应实体之间用一个 CRLF 空行分隔</li><li>最后是一个可能的消息实体</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>HTTP/1.1 200 OK</span></span>
<span class="line"><span>Date: Tue, 08 Jul 2014 05:28:43 GMT</span></span>
<span class="line"><span>Server: Apache/2</span></span>
<span class="line"><span>Last-Modified: Wed, 01 Sep 2004 13:24:52 GMT</span></span>
<span class="line"><span>ETag: &quot;40d7-3e3073913b100&quot;</span></span>
<span class="line"><span>Accept-Ranges: bytes</span></span>
<span class="line"><span>Content-Length: 16599</span></span>
<span class="line"><span>Cache-Control: max-age=21600</span></span>
<span class="line"><span>Expires: Tue, 08 Jul 2014 11:28:43 GMT</span></span>
<span class="line"><span>P3P: policyref=&quot;http://www.w3.org/2001/05/P3P/p3p.xml&quot;</span></span>
<span class="line"><span>Content-Type: text/html; charset=iso-8859-1</span></span>
<span class="line"><span></span></span>
<span class="line"><span>{&quot;name&quot;: &quot;qiu&quot;, &quot;age&quot;: 25}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="title-与-h1-的区别、b-与-strong-的区别、i-与-em-的区别" tabindex="-1"><a class="header-anchor" href="#title-与-h1-的区别、b-与-strong-的区别、i-与-em-的区别"><span>title 与 h1 的区别、b 与 strong 的区别、i 与 em 的区别</span></a></h3><ul><li><code>title</code> 属性没有明确意义只表示是个标题, <code>h1</code> 则表示层次明确的标题, 对页面信息的抓取也有很大的影响</li><li><code>strong</code> 是标明重点内容, 有语气加强的含义, 使用阅读设备阅读网络时: <code>&lt;strong&gt;</code>会重读, 而<code>&lt;b&gt;</code>是展示强调内容</li><li><code>i</code> 内容展示为斜体, <code>em</code> 表示强调的文本</li></ul><h3 id="请你谈谈-cookie-的弊端" tabindex="-1"><a class="header-anchor" href="#请你谈谈-cookie-的弊端"><span>请你谈谈 Cookie 的弊端</span></a></h3><blockquote><p><code>cookie</code> 虽然在持久保存客户端数据提供了方便, 分担了服务器存储的负担, 但还是有很多局限性的</p></blockquote><ul><li>每个特定的域名下最多生成 20 个 <code>cookie</code></li><li>IE6 或更低版本最多 20 个 cookie</li><li>IE7 和之后的版本最后可以有 50 个 cookie</li><li>Firefox 最多 50 个 cookie</li><li>chrome 和 Safari 没有做硬性限制</li><li>IE 和 Opera 会清理近期最少使用的 cookie, Firefox 会随机清理 cookie</li><li>cookie 的最大大约为 4096 字节, 为了兼容性, 一般设置不超过 4095 字节</li><li>如果 cookie 被人拦截了, 就可以取得所有的 session 信息</li></ul><h3 id="git-fetch-和-git-pull-的区别" tabindex="-1"><a class="header-anchor" href="#git-fetch-和-git-pull-的区别"><span>git fetch 和 git pull 的区别</span></a></h3><ul><li><code>git pull</code>: 相当于是从远程获取最新版本并 <code>merge</code> 到本地</li><li><code>git fetch</code>: 相当于是从远程获取最新版本到本地, 不会自动 <code>merge</code></li></ul><h2 id="css-部分" tabindex="-1"><a class="header-anchor" href="#css-部分"><span>CSS 部分</span></a></h2><h3 id="css-sprite-是什么-有什么优缺点" tabindex="-1"><a class="header-anchor" href="#css-sprite-是什么-有什么优缺点"><span>css sprite 是什么,有什么优缺点</span></a></h3><ul><li>概念: 将多个小图片拼接到一个图片中。通过 <code>background-position</code> 和元素尺寸调节需要显示的背景图案</li><li>优点: <ol><li>减少 <code>HTTP</code> 请求树, 极大的提高页面的加载速度</li><li>增加图片信息重复度, 提高压缩比, 减少图片大小</li><li>更换风格方便, 只需在一张或几张图片上修改颜色或样式即可实现</li></ol></li><li>缺点: <ol><li>图片合并麻烦</li><li>维护麻烦, 修改一个图片可能需要从新布局整个图片, 样式</li></ol></li></ul><h3 id="display-none-与-visibility-hidden-的区别" tabindex="-1"><a class="header-anchor" href="#display-none-与-visibility-hidden-的区别"><span>display: none;与 visibility: hidden;的区别</span></a></h3><ul><li>联系: 它们都能让元素不可见</li><li><code>display:none;</code> 会让元素完全从渲染树中消失, 渲染的时候不占据任何空间；<code>visibility: hidden;</code> 不会让元素从渲染树消失, 渲染师元素继续占据空间, 只是内容不可见</li><li><code>display: none;</code> 是非继承属性, 子孙节点消失由于元素从渲染树消失造成, 通过修改子孙节点属性无法显示；<code>visibility: hidden;</code> 是继承属性, 子孙节点消失由于继承了 hidden, 通过设置 <code>visibility: visible;</code> 可以让子孙节点显式</li><li>修改常规流中元素的 <code>display</code> 通常会造成文档重排。修改 <code>visibility</code> 属性只会造成本元素的重绘</li><li>读屏器不会读取 <code>display: none;</code> 元素内容；会读取 <code>visibility: hidden;</code> 元素内容</li></ul><h3 id="link-与-import-的区别" tabindex="-1"><a class="header-anchor" href="#link-与-import-的区别"><span>link 与@import 的区别</span></a></h3><ul><li><code>link</code> 是 <code>HTML</code> 方式, <code>@import</code> 是 <code>CSS</code> 方式</li><li><code>link</code> 最大限度支持并行下载, <code>@import </code>过多嵌套导致串行下载, 出现 <code>FOUC(Flash Of Unstyled Content)</code>(文档样式短暂失效)(也可以是 <code>style</code> 标签在 <code>body</code> 里面造成的)</li><li><code>link</code> 可以通过 <code>rel=&quot;alternate stylesheet&quot;</code> 指定候选样式</li><li>浏览器对 <code>link</code> 支持早于 <code>@import</code>, 可以使用 <code>@import</code> 对老浏览器隐藏样式</li><li><code>@import</code> 必须在样式规则之前, 可以在 <code>css</code> 文件中引用其他文件</li></ul><h3 id="什么是-fouc-如何避免" tabindex="-1"><a class="header-anchor" href="#什么是-fouc-如何避免"><span>什么是 FOUC?如何避免</span></a></h3><ul><li><code>Flash Of Unstyled Content:</code> 用户定义样式表加载之前浏览器使用默认样式显示文档, 用户样式加载渲染之后再从新显示文档, 造成页面闪烁</li><li>解决方法: 把样式表放到文档的<code>&lt;head&gt;</code></li></ul><h3 id="如何创建块级格式化上下文-block-formatting-context-bfc-有什么用" tabindex="-1"><a class="header-anchor" href="#如何创建块级格式化上下文-block-formatting-context-bfc-有什么用"><span>如何创建块级格式化上下文(block formatting context),BFC 有什么用</span></a></h3><blockquote><p><code>BFC(Block Formatting Context)</code>, 块级格式化上下文, 是一个独立的渲染区域, 让处于 <code>BFC</code> 内部的元素与外部的元素相互隔离, 使内外元素的定位不会相互影响</p></blockquote><ul><li>触发条件 (以下任意一条) <ol><li><code>float</code> 的值不为 <code>none</code></li><li><code>overflow</code> 的值不为 <code>visible</code></li><li><code>display</code> 的值为 <code>table-cell</code>、<code>tabble-caption</code> 和 <code>inline-block</code> 之一</li><li><code>position</code> 的值不为 <code>static</code> 或则 <code>relative</code> 中的任何一个</li></ol></li></ul><blockquote><p>在 <code>IE</code> 下, Layout,可通过 <code>zoom:1</code> 触发</p></blockquote><p><strong>BFC 布局与普通文档流布局区别</strong></p><ul><li><p>普通文档流布局</p><ol><li>浮动的元素是不会被父级计算高度</li><li>非浮动元素会覆盖浮动元素的位置</li><li><code>margin</code> 会传递给父级元素</li><li>两个相邻元素上下的 <code>margin</code> 会重叠</li></ol></li><li><p>BFC 布局规则</p><ol><li>浮动的元素会被父级计算高度(父级元素触发了 <code>BFC</code>)</li><li>非浮动元素不会覆盖浮动元素的位置(非浮动元素触发了 BFC)</li><li><code>margin</code> 不会传递给父级(父级触发 BFC)</li><li>属于同一个 <code>BFC</code> 的两个相邻元素上下 <code>margin</code> 会重叠</li></ol></li></ul><p><strong>开发中的应用</strong></p><ul><li>阻止 margin 重叠</li><li>可以包含浮动元素 —— 清除内部浮动(清除浮动的原理是两个 div 都位于同一个 BFC 区域之中)</li><li>自适应两栏布局</li><li>可以阻止元素被浮动元素覆盖</li></ul><h3 id="清除浮动的几种方式-各自的优缺点" tabindex="-1"><a class="header-anchor" href="#清除浮动的几种方式-各自的优缺点"><span>清除浮动的几种方式, 各自的优缺点</span></a></h3><ul><li>父级元素定义 <code>height</code></li><li>结尾处加空 div 标签 <code>clear:both</code></li><li>父级元素定义<code>伪类:after</code> 和 <code>zoom</code></li><li>父级元素定义 <code>overflow:hidden</code></li><li>父级元素也浮动, 需要定义宽度</li><li>结尾处加 <code>br</code> 标签 <code>clear:both</code></li><li>比较好的是第 3 种方式, 好多网站都这么用</li></ul><h3 id="为什么要初始化-css-样式" tabindex="-1"><a class="header-anchor" href="#为什么要初始化-css-样式"><span>为什么要初始化 CSS 样式?</span></a></h3><ul><li>因为浏览器的兼容问题, 不同浏览器对有些标签的默认值是不同的, 如果没对 CSS 初始化往往会出现浏览器之间的页面显示差异</li><li>当然, 初始化样式会对 <code>SEO</code> 有一定的影响, 但鱼和熊掌不可兼得, 但力求影响最小的情况下初始化</li></ul><h3 id="css3-有哪些新特性" tabindex="-1"><a class="header-anchor" href="#css3-有哪些新特性"><span>css3 有哪些新特性</span></a></h3><ul><li>新增选择器 p:nth-child(n){color: rgba(255, 0, 0, 0.75)}</li><li>弹性盒模型 display: flex;</li><li>媒体查询 @media (max-width: 480px) {.box: {column-count: 1;}}</li><li>个性化字体 @font-face{font-family: BorderWeb; src:url(BORDERW0.eot);}</li><li>颜色透明度 color: rgba(255, 0, 0, 0.75);</li><li>圆角 border-radius: 5px; <code>(顶左, 顶右, 底右, 底左)</code></li><li>渐变 background:linear-gradient(red, green, blue);</li><li>阴影 box-shadow:3px 3px 3px rgba(0, 64, 128, 0.3); <code>?inset x偏移 y偏移 模糊半径 扩散半径 ?颜色</code></li><li>倒影 -webkit-box-reflect: below 2px; <code>above | below | right | left length</code></li><li>文字装饰 -webkit-text-stroke(-width -color): 2px red;</li><li>文字溢出 text-overflow:ellipsis;</li><li>背景 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/background" target="_blank" rel="noopener noreferrer">background</a></li><li>转换 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/transform" target="_blank" rel="noopener noreferrer">transform</a></li><li>过渡效果 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/transition" target="_blank" rel="noopener noreferrer">transition</a></li><li>动画 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/@keyframes" target="_blank" rel="noopener noreferrer">@keyframes</a></li></ul><p><strong>CSS3 新增伪类有那些？</strong></p><ul><li>p:first-of-type 选择属于其父元素的首个 <code>p</code> 元素的每个 <code>p</code> 元素</li><li>p:last-of-type 选择属于其父元素的最后 <code>p</code> 元素的每个 <code>p</code> 元素</li><li>p:only-of-type 选择属于其父元素唯一的 <code>p</code> 元素的每个 <code>p</code> 元素</li><li>p:only-child 选择属于其父元素的唯一子元素的每个 <code>p</code> 元素</li><li>p:nth-child(2) 选择属于其父元素的第二个子元素的每个 <code>p</code> 元素</li><li>:after 在元素之前添加内容,也可以用来做清除浮动</li><li>:before 在元素之后添加内容</li><li>:enabled 已启用的表单元素</li><li>:disabled 已禁用的表单元素</li><li>:checked 单选框或复选框被选中</li></ul><h3 id="display-有哪些值-说明他们的作用" tabindex="-1"><a class="header-anchor" href="#display-有哪些值-说明他们的作用"><span>display 有哪些值？说明他们的作用</span></a></h3><ul><li><code>block</code> 转换成块状元素</li><li><code>inline</code> 转换成行内元素</li><li><code>inline-block</code> 像行内元素一样显示, 但其内容像块类型元素一样显示</li><li><code>flex</code> 弹性盒模型</li><li><code>grid</code> 网格布局</li><li><code>none</code> 设置元素不可见</li></ul><h3 id="介绍一下标准的-css-的盒子模型-低版本-ie-的盒子模型有什么不同的" tabindex="-1"><a class="header-anchor" href="#介绍一下标准的-css-的盒子模型-低版本-ie-的盒子模型有什么不同的"><span>介绍一下标准的 CSS 的盒子模型？低版本 IE 的盒子模型有什么不同的</span></a></h3><blockquote><p>有两种, <code>IE盒模型</code>、<code>W3C标准盒模型</code> 盒模型: 内容(content)、填充(padding)、边界(margin)、 边框(border) IE 的 content 部分把 border 和 padding 计算了进去;</p></blockquote><ul><li>IE8 及其以下版本浏览器, 未声明 DOCTYPE, 内容宽高会包含内填充和边框, 称为怪异盒模型(IE 盒模型)</li><li>标准(W3C)盒模型: 元素宽度 = width + padding + border + margin</li><li>怪异(IE)盒模型: 元素宽度 = width + margin</li><li>标准浏览器通过设置 css3 的 box-sizing: border-box(<code>ie 盒模型</code>, 默认 <code>content-box</code>) 属性, 触发 <code>怪异模式</code> 解析计算宽高</li></ul><p><strong>box-sizing 常用的属性有哪些？分别有什么作用</strong></p><ul><li><code>box-sizing: content-box;</code> 默认的标准(W3C)盒模型元素效果</li><li><code>box-sizing: border-box;</code> 触发怪异(IE)盒模型元素的效果</li><li><code>box-sizing: inherit;</code> 继承父元素 box-sizing 属性的值</li></ul><h3 id="css-优先级算法如何计算" tabindex="-1"><a class="header-anchor" href="#css-优先级算法如何计算"><span>CSS 优先级算法如何计算？</span></a></h3><ul><li>优先级就近原则, 同权重情况下样式定义最近者为准</li><li>载入样式以最后载入的定位为准</li><li>优先级为: !important &gt; id &gt; class &gt; tag; !important 比 内联优先级高</li></ul><h3 id="对-bfc-规范的理解" tabindex="-1"><a class="header-anchor" href="#对-bfc-规范的理解"><span>对 BFC 规范的理解</span></a></h3><ul><li>一个页面是由很多个 <code>Box</code> 组成的,元素的类型和 <code>display</code> 属性,决定了这个 Box 的类型</li><li>不同类型的 <code>Box</code>, 会参与不同的 <code>Formatting Context</code>（决定如何渲染文档的容器）, 因此 <code>Box</code> 内的元素会以不同的方式渲染,也就是说 BFC 内部的元素和外部的元素不会互相影响</li></ul><h3 id="谈谈浮动和清除浮动" tabindex="-1"><a class="header-anchor" href="#谈谈浮动和清除浮动"><span>谈谈浮动和清除浮动</span></a></h3><ul><li>浮动的框可以向左或向右移动, 直到他的外边缘碰到包含框或另一个浮动框的边框为止。由于浮动框不在文档的普通流中, 所以文档的普通流的块框表现得就像浮动框不存在一样。浮动的块框会漂浮在文档普通流的块框上</li></ul><h3 id="position-的值-relative-和-absolute-定位原点是" tabindex="-1"><a class="header-anchor" href="#position-的值-relative-和-absolute-定位原点是"><span>position 的值, relative 和 absolute 定位原点是</span></a></h3><ul><li>absolute 生成绝对定位的元素, 相对于 static 定位以外的第一个父元素进行定位</li><li>fixed 生成绝对定位的元素, 相对于浏览器窗口进行定位</li><li>relative 生成相对定位的元素, 相对于其正常位置进行定位</li><li>static 默认值。没有定位, 元素出现在正常的流中</li><li>inherit 规定从父元素继承 position 属性的值</li></ul><h3 id="display-inline-block-什么时候不会显示间隙" tabindex="-1"><a class="header-anchor" href="#display-inline-block-什么时候不会显示间隙"><span>display:inline-block 什么时候不会显示间隙</span></a></h3><ul><li>移除空格</li><li>使用 margin 负值</li><li>使用 font-size:0</li><li>letter-spacing <code>设置文本字符的间距表现</code></li><li>word-spacing <code>设置标签、单词之间的空格长度</code></li></ul><h3 id="before-和-after-中双冒号和单冒号-有什么区别-解释一下这-2-个伪元素的作用" tabindex="-1"><a class="header-anchor" href="#before-和-after-中双冒号和单冒号-有什么区别-解释一下这-2-个伪元素的作用"><span>::before 和 :after 中双冒号和单冒号 有什么区别？解释一下这 2 个伪元素的作用</span></a></h3><ul><li>单冒号(:)用于 CSS3 伪类, 双冒号(::)用于 CSS3 伪元素</li><li>用于区分伪类和伪元素</li></ul><h3 id="如果需要手动写动画-你认为最小时间间隔是多久-为什么" tabindex="-1"><a class="header-anchor" href="#如果需要手动写动画-你认为最小时间间隔是多久-为什么"><span>如果需要手动写动画, 你认为最小时间间隔是多久, 为什么</span></a></h3><ul><li>多数显示器默认频率是 60Hz, 即 1 秒刷新 60 次, 所以理论上最小间隔为 1/60*1000ms ＝ 16.7ms</li></ul><h3 id="列出你所知道可以改变页面布局的属性" tabindex="-1"><a class="header-anchor" href="#列出你所知道可以改变页面布局的属性"><span>列出你所知道可以改变页面布局的属性</span></a></h3><ul><li>position、display、float、width、height、margin、padding、top、left、right</li></ul><h3 id="css-在性能优化方面的实践" tabindex="-1"><a class="header-anchor" href="#css-在性能优化方面的实践"><span>CSS 在性能优化方面的实践</span></a></h3><ul><li>css 压缩与合并、Gzip 压缩</li><li>css 文件放在 head 里、不要用@import</li><li>尽量用缩写、避免用滤镜、合理使用选择器</li></ul><h3 id="base64-的原理及优缺点" tabindex="-1"><a class="header-anchor" href="#base64-的原理及优缺点"><span>base64 的原理及优缺点</span></a></h3><ul><li>优点可以加密, 减少了 HTTTP 请求</li><li>缺点是需要消耗 CPU 进行编解码</li></ul><h3 id="stylus-sass-less-区别" tabindex="-1"><a class="header-anchor" href="#stylus-sass-less-区别"><span>stylus/sass/less 区别</span></a></h3><ul><li>均具有 &quot;变量&quot; 、 &quot;混合&quot; 、 &quot;嵌套&quot; 、 &quot;继承&quot; 、 &quot;颜色混合&quot; 五大基本特性</li><li>Scss 和 LESS 语法较为严谨, LESS 要求一定要使用大括号“{}”, Scss 和 Stylus 可以通过缩进表示层次与嵌套关系</li><li>Scss 无全局变量的概念, LESS 和 Stylus 有类似于其它语言的作用域概念</li><li>Sass 是基于 Ruby 语言的, 而 LESS 和 Stylus 可以基于 NodeJS NPM 下载相应库后进行编译</li></ul><h3 id="postcss-的作用" tabindex="-1"><a class="header-anchor" href="#postcss-的作用"><span>postcss 的作用</span></a></h3><ul><li>可以直观的理解为: 它就是一个平台。为什么说它是一个平台呢？因为我们直接用它, 感觉不能干什么事情, 但是如果让一些插件在它上面跑, 那么将会很强大</li><li>PostCSS 提供了一个解析器, 它能够将 CSS 解析成抽象语法树</li><li>通过在 PostCSS 这个平台上, 我们能够开发一些插件, 来处理我们的 CSS, 比如热门的: autoprefixer</li><li>postcss 可以对 sass 处理过后的 css 再处理 最常见的就是 autoprefixer</li></ul><h3 id="如何美化-checkbox" tabindex="-1"><a class="header-anchor" href="#如何美化-checkbox"><span>如何美化 CheckBox</span></a></h3><ul><li><code>&lt;label&gt;</code> 属性 for 和 id</li><li>隐藏原生的 <code>&lt;input&gt;</code></li><li>:checked + <code>&lt;label&gt;</code></li></ul><h3 id="伪类和伪元素的区别" tabindex="-1"><a class="header-anchor" href="#伪类和伪元素的区别"><span>伪类和伪元素的区别</span></a></h3><ul><li>伪类表状态</li><li>伪元素是真的有元素</li><li>前者单冒号, 后者双冒号</li></ul><h3 id="base64-的使用" tabindex="-1"><a class="header-anchor" href="#base64-的使用"><span>base64 的使用</span></a></h3><ul><li>用于减少 HTTP 请求</li><li>适用于小图片</li><li>base64 的体积约为原图的 3/4</li></ul><h3 id="请列举几种隐藏元素的方法" tabindex="-1"><a class="header-anchor" href="#请列举几种隐藏元素的方法"><span>请列举几种隐藏元素的方法</span></a></h3><ul><li><code>visibility: hidden;</code> 这个属性只是简单的隐藏某个元素, 但是元素占用的空间任然存在</li><li><code>opacity: 0;</code> CSS3 属性, 设置 0 可以使一个元素完全透明</li><li><code>position: absolute;</code></li><li><code>display: none;</code></li><li><code>transform: scale(0);</code></li><li><code>&lt;div hidden=&quot;hidden&quot;&gt;&lt;/div&gt;</code> HTML5 属性,效果和 display:none;相同, 但这个属性用于记录一个元素的状态</li><li><code>height: 0;</code> 将元素高度设为 0 , 并消除边框</li><li><code>filter: blur(0);</code> CSS3 属性, 将一个元素的模糊度设置为 0, 从而使这个元素“消失”在页面中</li></ul><h3 id="rgba-和-opacity-的透明效果有什么不同" tabindex="-1"><a class="header-anchor" href="#rgba-和-opacity-的透明效果有什么不同"><span>rgba() 和 opacity 的透明效果有什么不同</span></a></h3><ul><li><code>opacity</code> 作用于元素以及元素内的所有内容（包括文字）的透明度</li><li><code>rgba()</code> 只作用于元素自身的颜色或其背景色, 子元素不会继承透明效果</li></ul><h3 id="css-属性-content-有什么作用" tabindex="-1"><a class="header-anchor" href="#css-属性-content-有什么作用"><span>css 属性 content 有什么作用</span></a></h3><ul><li><code>content</code> 属性专门应用在 <code>before/after</code> 伪元素上, 用于插入额外内容或样式, 最常见的应用是利用伪类清除浮动。</li></ul><h3 id="经常遇到的浏览器的-js-兼容性有哪些-解决方法是什么" tabindex="-1"><a class="header-anchor" href="#经常遇到的浏览器的-js-兼容性有哪些-解决方法是什么"><span>经常遇到的浏览器的 JS 兼容性有哪些？解决方法是什么</span></a></h3><ul><li>当前样式: getComputedStyle(el, null) VS el.currentStyle</li><li>事件对象: e VS window.event</li><li>鼠标坐标: e.pageX, e.pageY VS window.event.x, window.event.y</li><li>按键码: e.which VS event.keyCode</li><li>文本节点: el.textContent VS el.innerText</li></ul><h3 id="css-优化、提高性能的方法有哪些" tabindex="-1"><a class="header-anchor" href="#css-优化、提高性能的方法有哪些"><span>CSS 优化、提高性能的方法有哪些</span></a></h3><ul><li>多个 css 合并, 尽量减少 HTTP 请求</li><li>将 css 文件放在页面最上面</li><li>移除空的 css 规则</li><li>避免使用 CSS 表达式</li><li>选择器优化嵌套, 尽量避免层级过深</li><li>充分利用 css 继承属性, 减少代码量</li><li>抽象提取公共样式, 减少代码量</li><li>属性值为 0 时, 不加单位</li><li>属性值为小于 1 的小数时, 省略小数点前面的 0</li></ul><h3 id="margin-和-padding-分别适合什么场景使用" tabindex="-1"><a class="header-anchor" href="#margin-和-padding-分别适合什么场景使用"><span>margin 和 padding 分别适合什么场景使用</span></a></h3><ul><li>需要在 border 外侧添加空白, 且空白处不需要背景（色）时, 使用 margin</li><li>需要在 border 内测添加空白, 且空白处需要背景（色）时, 使用 padding</li></ul><h3 id="元素竖向的百分比设定是相对于容器的高度吗" tabindex="-1"><a class="header-anchor" href="#元素竖向的百分比设定是相对于容器的高度吗"><span>元素竖向的百分比设定是相对于容器的高度吗</span></a></h3><ul><li>元素竖向的百分比设定是相对于容器的宽度, 而不是高度</li></ul><h3 id="全屏滚动的原理是什么-用到了-css-的那些属性" tabindex="-1"><a class="header-anchor" href="#全屏滚动的原理是什么-用到了-css-的那些属性"><span>全屏滚动的原理是什么？ 用到了 CSS 的那些属性</span></a></h3><ul><li>超出隐藏部分, 滚动时显示</li><li>可能用到的 CSS 属性: overflow:hidden; transform:translate(100%, 100%); display:none;</li></ul><h3 id="什么是响应式设计-响应式设计的基本原理是什么-如何兼容低版本的-i" tabindex="-1"><a class="header-anchor" href="#什么是响应式设计-响应式设计的基本原理是什么-如何兼容低版本的-i"><span>什么是响应式设计？响应式设计的基本原理是什么？如何兼容低版本的 I</span></a></h3><ul><li>响应式设计就是网站能够兼容多个终端, 而不是为每个终端做一个特定的版本</li><li>基本原理是利用 CSS3 媒体查询, 为不同尺寸的设备适配不同样式</li><li>对于低版本的 IE, 可采用 JS 获取屏幕宽度, 然后通过 resize 方法来实现兼容</li></ul><h3 id="a-标签上四个伪类的执行顺序是怎么样的" tabindex="-1"><a class="header-anchor" href="#a-标签上四个伪类的执行顺序是怎么样的"><span>a 标签上四个伪类的执行顺序是怎么样的</span></a></h3><ul><li>link &gt; visited &gt; hover &gt; active</li></ul><h3 id="伪元素和伪类的区别和作用" tabindex="-1"><a class="header-anchor" href="#伪元素和伪类的区别和作用"><span>伪元素和伪类的区别和作用</span></a></h3><ul><li>伪元素: 在内容元素的前后插入额外的元素或样式, 但是这些元素实际上并不在文档中生成, 它们只在外部显示可见, 但不会在文档的源代码中找到它们, 因此, 称为“伪”元素</li><li>伪类: 将特殊的效果添加到特定选择器上。它是已有元素上添加类别的, 不会产生新的元素</li></ul><h3 id="before-和-after-中双冒号和单冒号有什么区别" tabindex="-1"><a class="header-anchor" href="#before-和-after-中双冒号和单冒号有什么区别"><span>::before 和 :after 中双冒号和单冒号有什么区别</span></a></h3><ul><li>在 CSS 中伪类一直用 <code>:</code> 表示, 如 <code>:hover</code>, <code>:active</code> 等</li><li>伪元素在 CSS1 中已存在, 当时语法是用 : 表示, 如 :before 和 :after</li><li>后来在 CSS3 中修订, 伪元素用 <code>::</code> 表示, 如 ::before 和 ::after, 以此区分伪元素和伪类</li><li>由于低版本 IE 对双冒号不兼容, 开发者为了兼容性各浏览器, 继续使使用 :after 这种老语法表示伪元素</li><li>综上所述: ::before 是 CSS3 中写伪元素的新语法； :after 是 CSS1 中存在的、兼容 IE 的老语法</li></ul><h3 id="px-和-em-的区别" tabindex="-1"><a class="header-anchor" href="#px-和-em-的区别"><span>px 和 em 的区别</span></a></h3><ul><li>px 和 em 都是长度单位, 区别是, px 的值是固定的, 指定是多少就是多少, 计算比较容易。em 得值不是固定的, 并且 em 会继承父级元素的字体大小</li><li>浏览器的默认字体高都是 16px。所以未经调整的浏览器都符合: 1em=16px。那么 12px=0.75em, 10px=0.625em</li></ul><blockquote><p>px 相对于显示器屏幕分辨率, 无法用浏览器字体放大功能 em 值并不是固定的, 会继承父级的字体大小: em = 像素值 / 父级 font-size</p></blockquote><h3 id="如何修改-chrome-记住密码后自动填充表单的黄色背景" tabindex="-1"><a class="header-anchor" href="#如何修改-chrome-记住密码后自动填充表单的黄色背景"><span>如何修改 Chrome 记住密码后自动填充表单的黄色背景</span></a></h3><p><code>:autofill</code> 伪类</p><ul><li>产生原因: 由于 <code>Chrome</code> 默认会给自动填充的 <code>input</code> 表单加上 <code>input:-webkit-autofill</code> 私有属性造成的</li><li>解决方案 1: 在 form 标签上直接关闭了表单的自动填充: autocomplete=&quot;off&quot;</li><li>解决方案 2: input:-webkit-autofill { background-color: transparent; }</li></ul><h3 id="水平居中的方法" tabindex="-1"><a class="header-anchor" href="#水平居中的方法"><span>水平居中的方法</span></a></h3><ul><li>元素为行内元素, 设置父元素 text-align:center</li><li>如果元素宽度固定, 可以设置左右 margin 为 auto</li><li>绝对定位和移动: absolute + transform</li><li>使用 flex-box 布局, 指定 justify-content 属性为 center</li></ul><h3 id="垂直居中的方法" tabindex="-1"><a class="header-anchor" href="#垂直居中的方法"><span>垂直居中的方法</span></a></h3><ul><li>使用 flex 布局, 设置为 align-item: center</li><li>绝对定位中设置 bottom:0,top:0,并设置 margin:auto</li><li>绝对定位中固定高度时设置 top:50%, margin-top 值为高度一半的负值</li><li>文本垂直居中设置 line-height 为 height 值</li></ul><h3 id="如何使用-css-实现硬件加速" tabindex="-1"><a class="header-anchor" href="#如何使用-css-实现硬件加速"><span>如何使用 CSS 实现硬件加速</span></a></h3><ul><li>硬件加速是指通过创建独立的复合图层, 让 GPU 来渲染这个图层, 从而提高性能,</li><li>一般触发硬件加速的 CSS 属性有 <code>transform、opacity、filter</code> , 为了避免 2D 动画在 开始和结束的时候的 <code>repaint</code> 操作, 一般使用 <code>tranform:translateZ(0)</code></li></ul><h3 id="重绘和回流-重排-是什么-如何避免" tabindex="-1"><a class="header-anchor" href="#重绘和回流-重排-是什么-如何避免"><span>重绘和回流（重排）是什么, 如何避免</span></a></h3><ul><li>重绘: 当渲染树中的元素外观（如: 颜色）发生改变, 不影响布局时, 产生重绘</li><li>回流: 当渲染树中的元素的布局（如: 尺寸、位置、隐藏/状态状态）发生改变时, 产生回流</li><li>注意: JS 获取 <code>Layout</code> 属性值（如: <code>offsetLeft、scrollTop、getComputedStyle</code> 等）也会引起回流。因为浏览器需要通过回流计算最新值</li><li>回流必将引起重绘, 而重绘不一定会引起回流</li></ul><p><strong>如何最小化重绘(repaint)和回流(reflow)</strong></p><ul><li>需要要对元素进行复杂的操作时, 可以先隐藏(display:&quot;none&quot;), 操作完成后再显示</li><li>需要创建多个 DOM 节点时, 使用 <code>DocumentFragment</code> 创建完后一次性的加入 document</li><li>缓存 Layout 属性值, 如: var left = elem.offsetLeft; 这样, 多次使用 left 只产生一次回流</li><li>尽量避免用 table 布局 (table 元素一旦触发回流就会导致 table 里所有的其它元素回流)</li><li>避免使用 css 表达式(expression), 因为每次调用都会重新计算值（包括加载页面）</li><li>尽量使用 css 属性简写, 如: 用 border 代替 border-width, border-style, border-color</li><li>批量修改元素样式: elem.className 和 elem.style.cssText 代替 elem.style.xxx</li></ul><h3 id="两种以上方式实现已知或者未知宽度的垂直水平居中" tabindex="-1"><a class="header-anchor" href="#两种以上方式实现已知或者未知宽度的垂直水平居中"><span>两种以上方式实现已知或者未知宽度的垂直水平居中</span></a></h3><div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" data-title="css" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">/** common  */</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">html</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;">.wraper</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#ABB2BF;">  height</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">100</span><span style="--shiki-light:#D73A49;--shiki-dark:#E06C75;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#ABB2BF;">  width</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">100</span><span style="--shiki-light:#D73A49;--shiki-dark:#E06C75;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;">.box</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#ABB2BF;">  width</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">100</span><span style="--shiki-light:#D73A49;--shiki-dark:#E06C75;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#ABB2BF;">  height</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">100</span><span style="--shiki-light:#D73A49;--shiki-dark:#E06C75;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">/** 1 **/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;">.wraper</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#ABB2BF;">  position</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">relative</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  .</span><span style="--shiki-light:#005CC5;--shiki-dark:#ABB2BF;">box</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#ABB2BF;">    position</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">absolute</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#ABB2BF;">    top</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">50</span><span style="--shiki-light:#D73A49;--shiki-dark:#E06C75;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#ABB2BF;">    left</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">50</span><span style="--shiki-light:#D73A49;--shiki-dark:#E06C75;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#ABB2BF;">    margin</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">-50</span><span style="--shiki-light:#D73A49;--shiki-dark:#E06C75;">px</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -50</span><span style="--shiki-light:#D73A49;--shiki-dark:#E06C75;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">/**偏移量是长款的一半 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">/** 2 **/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;">.wraper</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#ABB2BF;">  position</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">relative</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  .</span><span style="--shiki-light:#005CC5;--shiki-dark:#ABB2BF;">box</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#ABB2BF;">    position</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">absolute</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#ABB2BF;">    top</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">50</span><span style="--shiki-light:#D73A49;--shiki-dark:#E06C75;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#ABB2BF;">    left</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">50</span><span style="--shiki-light:#D73A49;--shiki-dark:#E06C75;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#ABB2BF;">    transform</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">translate</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">-50</span><span style="--shiki-light:#D73A49;--shiki-dark:#E06C75;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">-50</span><span style="--shiki-light:#D73A49;--shiki-dark:#E06C75;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">/** 3 **/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;">.wraper</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#ABB2BF;">  display</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">flex</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#ABB2BF;">  justify-content</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">center</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#ABB2BF;">  align-items</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">center</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="如何实现小于-12px-的字体效果" tabindex="-1"><a class="header-anchor" href="#如何实现小于-12px-的字体效果"><span>如何实现小于 12px 的字体效果</span></a></h3><ul><li><code>transform:scale()</code> 这个属性只可以缩放可以定义宽高的元素, 而行内元素是没有宽高的, 我们可以加上一个 <code>display:inline-block;</code></li><li>当我们在使用 <code>transform: scale</code> 缩小元素的时候, 顺便把 <code>transform-origin</code> 改成 left top, 才能保证左上角不动, 因为左上角一动就导致定位就不准了 (top、left、margin 等都不准了)</li></ul><h3 id="css-有哪些继承属性" tabindex="-1"><a class="header-anchor" href="#css-有哪些继承属性"><span>CSS 有哪些继承属性</span></a></h3><ul><li>text-align</li><li>text-indent</li><li>line-height</li><li>color</li><li>visibility</li><li>cursor</li></ul><h2 id="javascript" tabindex="-1"><a class="header-anchor" href="#javascript"><span>JavaScript</span></a></h2><h3 id="闭包" tabindex="-1"><a class="header-anchor" href="#闭包"><span>闭包</span></a></h3><ul><li>闭包就是能够读取其他函数内部变量的函数</li><li>闭包指有权访问另一函数作用域中变量的函数, 创建闭包最简单的方法就是在函数内部创建一个函数, 通过另一个函数来访问这个函数内部的变量</li><li>闭包的特性: <ol><li>函数内部再嵌套一个函数</li><li>内部函数可以使用外部函数内的变量</li><li>引用的变量或者参数是不会被垃圾回收的</li></ol></li></ul><p><strong>说说你对闭包的理解</strong></p><ol><li>使用闭包主要是为了设计私有的方法和变量。闭包的优点是可以避免全局变量的污染, 缺点是闭包会常驻内存, 会增大内存使用量, 使用不当很容易造成内存泄露。在 js 中, 函数即闭包, 只有函数才会产生作用域的概念</li><li>闭包 的最大用处有两个, 一个是可以读取函数内部的变量, 另一个就是让这些变量始终保持在内存中</li><li>闭包的另一个用处, 是封装对象的私有属性和私有方法</li><li>能够实现封装和缓存等</li><li>就是消耗内存、不正当使用会造成内存溢出的问题</li></ol><p><strong>使用闭包的注意点</strong></p><ol><li>由于闭包会使得函数中的变量都被保存在内存中, 内存消耗很大, 所以不能滥用闭包, 否则会造成网页的性能问题, 在 IE 中可能导致内存泄漏</li><li>解决方法是, 在退出函数之前, 将不使用的局部变量全部删除</li></ol><p><strong>举出闭包实际场景运用的例子</strong></p><ol><li><p>比如常见的防抖节流</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> debounce</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">fn</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">delay</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 300</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> timer</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//闭包引用的外界变量</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">  return</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> () {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> args</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> arguments</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">timer</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">      clearTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">timer</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">    timer</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">      fn</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">apply</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }, </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">delay</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>使用闭包可以在 JavaScript 中模拟块级作用域</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> outputNumbers</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">count</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  (</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> () {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">i</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> &lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> count</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">i</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">      alert</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">i</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  })();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  // alert(i); //导致一个错误！</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>闭包可以用于在对象中创建私有变量</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> aaa</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> () {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">  var</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> a</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">  function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> bbb</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">    a</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">    console</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">  function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> ccc</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">    a</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">    console</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">    b</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">bbb</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//json结构</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">    c</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">ccc</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">})();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">console</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">aaa</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//undefined</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">aaa</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">aaa</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">c</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//3</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="说说你对作用域链的理解" tabindex="-1"><a class="header-anchor" href="#说说你对作用域链的理解"><span>说说你对作用域链的理解</span></a></h3><ol><li>作用域链的作用是保证执行环境里有权访问的变量和函数是有序的, 作用域链的变量只能向上访问, 变量访问到 window 对象即被终止, 作用域链向下访问变量是不被允许的</li><li>简单的说, 作用域就是变量与函数的可访问范围, 即作用域控制着变量与函数的可见性和生命周期</li></ol><h3 id="javascript-原型-原型链-有什么特点" tabindex="-1"><a class="header-anchor" href="#javascript-原型-原型链-有什么特点"><span>JavaScript 原型, 原型链 ? 有什么特点？</span></a></h3><ol><li>每个对象都会在其内部初始化一个属性, 就是 <code>__proto__</code></li><li>当我们访问该对象上不存在的属性或者方法时, 就会去 <code>__proto__</code> 上找, 如果没有则会继续在 <code>__proto__</code> 的 <code>__proto__</code> 找</li><li><code>instance.constructor.prototype == instance.__proto__</code></li></ol><p><strong>特点</strong></p><ol><li>JavaScript 对象是通过引用来传递的, 我们创建的每个新对象实体中并没有一份属于自己的原型副本。当我们修改原型时, 与之相关的对象也会继承这一改变</li><li>当我们需要一个属性的时, Javascript 引擎会先看当前对象中是否有这个属性, 如果没有的就会查找他的 Prototype 对象是否有这个属性, 如此递推下去, 一直检索到 Object 内建对象</li></ol><p><strong>原型</strong></p><blockquote><p>注意 实例上是没有 <code>prototype</code> 属性的</p></blockquote><ol><li>JavaScript 的所有对象中都包含了一个 [<strong>proto</strong>] 内部属性, 这个属性所对应的就是该对象的原型</li><li>JavaScript 的函数对象, 除了原型 [<strong>proto</strong>] 之外, 还预置了 prototype 属性</li><li>当函数对象作为构造函数创建实例时, 该 prototype 属性值将被作为实例对象的原型 [<strong>proto</strong>]</li></ol><p><strong>原型链</strong></p><p>当访问一个对象没有的 <code>key</code> 或者 方法时, 便会去 改对象的 <code>__proto__</code> 上寻找, 没有找到就回接着去 <code>__proto__</code> 的 <code>__proto__</code> 寻找</p><p><strong>原型特点</strong></p><p>JavaScript 对象是通过引用来传递的, 当修改原型时, 与之相关的对象也会继承这一改变</p><h3 id="请解释什么是事件代理" tabindex="-1"><a class="header-anchor" href="#请解释什么是事件代理"><span>请解释什么是事件代理</span></a></h3><p>事件代理 (Event Delegation) 又称之为事件委托。是 JavaScript 中常用绑定事件的常用技巧。顾名思义, “事件代理”即是把原本需要绑定的事件委托给父元素, 让父元素担当事件监听的职务</p><h3 id="谈谈-this-对象的理解" tabindex="-1"><a class="header-anchor" href="#谈谈-this-对象的理解"><span>谈谈 This 对象的理解</span></a></h3><ol><li>this 总是指向函数的直接调用者 (而非间接调用者)</li><li>如果有 new 关键字, this 指向 new 出来的那个对象</li><li>在事件中, this 指向触发这个事件的对象, 特殊的是, IE 中的 attachEvent 中的 this 总是指向全局对象 Window</li></ol><h3 id="事件模型" tabindex="-1"><a class="header-anchor" href="#事件模型"><span>事件模型</span></a></h3><blockquote><p>事件一共有三个阶段, 分别是 捕获阶段(从上往下), 目标阶段, 冒泡阶段(从下往上) addEventListener 的 第三个参数 可以是一个对象 或者一个 布尔值 对象可以有一下的几个键值 <code>capture(是否使用事件捕获, 默认冒泡)</code>, <code>passive(true时永远不会调用 preventDefault() 方法)</code>, <code>once(是否只调用一次)</code>, <code>signal</code> 布尔值时 也就是 对象的 <code>capture</code> 参数一样的效果 默认是 <code>false</code> 即 <code>冒泡</code></p></blockquote><ol><li>冒泡型事件: 先子后父, 从下往上 触发</li><li>捕获型事件: 先父后子, 从上往下 触发</li><li>DOM 事件流: 同时支持两种事件模型: 捕获型事件和冒泡型事件</li><li>阻止冒泡: <code>e.stopPropagation()</code> IE 下 设置 <code>cancelBubble = true</code></li><li>阻止捕获(阻止默认): <code>e.preventDefault()</code> IE 下设置 <code>window.event.returnValue = false</code></li></ol><h3 id="new-操作符具体干了什么呢" tabindex="-1"><a class="header-anchor" href="#new-操作符具体干了什么呢"><span>new 操作符具体干了什么呢</span></a></h3><ol><li>创建一个空对象, 并将 <code>this</code> 指向改对象, 同时继承 构造函数或者类的原型</li><li>构造函数 或者 类的 属性方法 放进 <code>this</code> 引用对象中</li><li>新创建的对象由 <code>this</code> 所引用，并且最后隐式的返回 <code>this</code></li></ol><h3 id="ajax-原理" tabindex="-1"><a class="header-anchor" href="#ajax-原理"><span>Ajax 原理</span></a></h3><p><code>Ajax</code> 的原理简单来说是在用户和服务器之间加了—个中间层<code>(AJAX 引擎)</code>, 通过 <code>XMLHttpRequest</code> 对象来向服务器发异步请求，从服务器获得数据，然后用 <code>javascript</code> 来操作 DOM 而更新页面, <code>使用户操作与服务器响应异步化</code></p><p><strong>XMLHttpRequest</strong></p><p><code>XMLHttpRequest</code> 的实例 有这么几个属性和方法</p><ol><li>onreadstatechange: 当 <code>readyState</code> 属性发生变化时, 调用的事件处理器</li><li>readyState: 请求的状态码</li><li>response: 响应实体</li><li>responseText: 返回一个 <code>DOMString</code>, 该 <code>DOMString</code> 包含对请求的响应，如果请求未成功或尚未发送，则返回 null</li><li>responseType: 响应类型</li><li>status: 响应状态码</li><li>statusText: 返回一个 <code>DOMString</code>, 其中包含 HTTP 服务器返回的响应状态。与 <code>XMLHTTPRequest.status</code> 不同的是，它包含完整的响应状态文本(例如: &quot;200 OK&quot;)</li><li>upload: 代表上传进度</li><li>withCredentials: 用来指定跨域 <code>Access-Control</code> 请求是否应当带有授权信息，如 cookie 或授权 header 头</li><li>open 方法: 初始化一个请求</li><li>send 方法: 发送一个请求</li><li>setRequestHeader 方法: 设置请求头</li><li>abort 方法: 中止已经发送的请求</li><li>getAllResposeHeaders 方法: 获取响应头</li><li>getResponseHeader 方法: 获取响应头中指定的字段值</li></ol><table><thead><tr><th>值</th><th>状态</th><th>描述</th></tr></thead><tbody><tr><td>0</td><td>UNSENT</td><td>代理被创建，但尚未调用 open() 方法</td></tr><tr><td>1</td><td>OPENED</td><td>open() 方法已经被调用</td></tr><tr><td>2</td><td>HEADERS_RECEIVED</td><td>send() 方法已经被调用，并且头部和状态已经可获得</td></tr><tr><td>3</td><td>LOADING</td><td>下载中 responseText 属性已经包含部分数据</td></tr><tr><td>4</td><td>DONE</td><td>下载操作已完成</td></tr></tbody></table><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> xhr</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> XMLHttpRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 设置响应头</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">xhr</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">setRequestHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">/** */</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">xhr</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">open</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">/** */</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">xhr</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">send</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">/** */</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">xhr</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">onreadstatechange</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">xhr</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">state</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> ===</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 4</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">xhr</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">readState</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> ===</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 200</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">      // success</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">      // error</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">xhr</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">abort</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  // 中止请求触发</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">xhr</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">error</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  // 当 request 遭遇错误时触发。 也可以使用 onerror 属性</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>ajax 有那些优缺点?</strong></p><ul><li><p>优点</p><ol><li>通过异步模式，提升了用户体验</li><li>优化了浏览器和服务器之间的传输，减少不必要的数据往返，减少了带宽占用</li><li>Ajax 在客户端运行，承担了一部分本来由服务器承担的工作，减少了大用户量下的服务器负载</li><li>Ajax 可以实现动态不刷新（局部刷新）</li></ol></li><li><p>缺点</p><ol><li>安全问题 AJAX 暴露了与服务器交互的细节</li><li>对搜索引擎的支持比较弱</li><li>不容易调试</li></ol></li></ul><h3 id="如何解决跨域问题" tabindex="-1"><a class="header-anchor" href="#如何解决跨域问题"><span>如何解决跨域问题</span></a></h3><p>跨域问题的本质是因为浏览器的 <code>同源策略(same origin policy)</code>, 没有同源策略的话, 浏览器很容易受到 <code>XSS</code>, <code>CSRF</code> 等攻击 (相关攻击了解下这个篇<a href="https://juejin.cn/post/6844903781704925191" target="_blank" rel="noopener noreferrer">文章</a>)</p><p>同源策略 即 <code>协议</code>, <code>域名</code>, <code>端口</code> 完全一致</p><ol><li>通过 jsonp 跨域: js 的调用是不会经过同源策略的</li><li>document.domain + iframe 跨域 (此方案仅限主域相同，子域不同的跨域应用场景)</li><li>nginx 代理跨域</li><li>nodejs 中间件代理</li><li>后端在头部信息里面设置安全域名</li></ol><h3 id="异步加载-js-的方式有哪些" tabindex="-1"><a class="header-anchor" href="#异步加载-js-的方式有哪些"><span>异步加载 JS 的方式有哪些</span></a></h3><ol><li>设置<code>script</code>标签属性 async</li><li>动态创建 script DOM: document.createElement(&#39;script&#39;);</li><li><code>XMLHttpRequest</code> 脚本注入</li></ol><h3 id="那些操作会造成内存泄漏" tabindex="-1"><a class="header-anchor" href="#那些操作会造成内存泄漏"><span>那些操作会造成内存泄漏</span></a></h3><blockquote><p>JavaScript 内存泄露指对象在不需要使用它时仍然存在，导致占用的内存不能使用或回收</p></blockquote><ol><li>未使用 var 声明的全局变量</li><li>闭包函数(Closures)</li><li>循环引用</li><li>控制台日志(console.log)</li></ol><h3 id="说说你对-amd-和-commonjs-的理解" tabindex="-1"><a class="header-anchor" href="#说说你对-amd-和-commonjs-的理解"><span>说说你对 AMD 和 Commonjs 的理解</span></a></h3><ol><li>CommonJS 是服务器端模块的规范，Node.js 采用了这个规范。CommonJS 规范加载模块是同步的，也就是说，只有加载完成，才能执行后面的操作。AMD 规范则是非同步加载模块，允许指定回调函数</li><li>AMD 推荐的风格通过返回一个对象做为模块对象，CommonJS 的风格通过对 module.exports 或 exports 的属性赋值来达到暴露模块对象的目的</li></ol>`,233),t=[n];function h(d,p){return l(),s("div",null,t)}const o=i(a,[["render",h],["__file","2.html.vue"]]),c=JSON.parse('{"path":"/interview/2.html","title":"面试题-基础篇","lang":"zh-CN","frontmatter":{"title":"面试题-基础篇","date":"2023-04-12T04:41:17.000Z","tag":["面试题"],"category":["面试题"],"description":"面试题","footer":true,"article":false},"headers":[{"level":2,"title":"HTML 部分","slug":"html-部分","link":"#html-部分","children":[{"level":3,"title":"前端需要注意哪些 SEO(Search Engine Optimization)","slug":"前端需要注意哪些-seo-search-engine-optimization","link":"#前端需要注意哪些-seo-search-engine-optimization","children":[]},{"level":3,"title":"的 title 和 alt 有什么区别","slug":"的-title-和-alt-有什么区别","link":"#的-title-和-alt-有什么区别","children":[]},{"level":3,"title":"HTTP 的几种请求方法用途","slug":"http-的几种请求方法用途","link":"#http-的几种请求方法用途","children":[]},{"level":3,"title":"从浏览器地址栏输入 url 到显示页面的步骤","slug":"从浏览器地址栏输入-url-到显示页面的步骤","link":"#从浏览器地址栏输入-url-到显示页面的步骤","children":[]},{"level":3,"title":"HTTP 状态码及其含义","slug":"http-状态码及其含义","link":"#http-状态码及其含义","children":[]},{"level":3,"title":"语义化的理解","slug":"语义化的理解","link":"#语义化的理解","children":[]},{"level":3,"title":"介绍一下你对浏览器内核的理解","slug":"介绍一下你对浏览器内核的理解","link":"#介绍一下你对浏览器内核的理解","children":[]},{"level":3,"title":"html5 有哪些新特性、移除了那些元素","slug":"html5-有哪些新特性、移除了那些元素","link":"#html5-有哪些新特性、移除了那些元素","children":[]},{"level":3,"title":"请描述一下 cookies, sessionStorage 和 localStorage 的区别","slug":"请描述一下-cookies-sessionstorage-和-localstorage-的区别","link":"#请描述一下-cookies-sessionstorage-和-localstorage-的区别","children":[]},{"level":3,"title":"iframe 有那些缺点","slug":"iframe-有那些缺点","link":"#iframe-有那些缺点","children":[]},{"level":3,"title":"WEB 标准以及 W3C 标准是什么?","slug":"web-标准以及-w3c-标准是什么","link":"#web-标准以及-w3c-标准是什么","children":[]},{"level":3,"title":"xhtml 和 html 有什么区别","slug":"xhtml-和-html-有什么区别","link":"#xhtml-和-html-有什么区别","children":[]},{"level":3,"title":"行内元素有哪些？块级元素有哪些？ 空(void)元素有那些？行内元素和块级元素有什么区别？","slug":"行内元素有哪些-块级元素有哪些-空-void-元素有那些-行内元素和块级元素有什么区别","link":"#行内元素有哪些-块级元素有哪些-空-void-元素有那些-行内元素和块级元素有什么区别","children":[]},{"level":3,"title":"HTML 全局属性(global attribute)有哪些","slug":"html-全局属性-global-attribute-有哪些","link":"#html-全局属性-global-attribute-有哪些","children":[]},{"level":3,"title":"viewport","slug":"viewport","link":"#viewport","children":[]},{"level":3,"title":"渲染优化","slug":"渲染优化","link":"#渲染优化","children":[]},{"level":3,"title":"meta viewport 相关","slug":"meta-viewport-相关","link":"#meta-viewport-相关","children":[]},{"level":3,"title":"div+css 的布局较 table 布局有什么优点","slug":"div-css-的布局较-table-布局有什么优点","link":"#div-css-的布局较-table-布局有什么优点","children":[]},{"level":3,"title":"strong 与 em 的异同","slug":"strong-与-em-的异同","link":"#strong-与-em-的异同","children":[]},{"level":3,"title":"你能描述一下渐进增强和优雅降级之间的不同吗","slug":"你能描述一下渐进增强和优雅降级之间的不同吗","link":"#你能描述一下渐进增强和优雅降级之间的不同吗","children":[]},{"level":3,"title":"为什么利用多个域名来存储网站资源会更有效？","slug":"为什么利用多个域名来存储网站资源会更有效","link":"#为什么利用多个域名来存储网站资源会更有效","children":[]},{"level":3,"title":"简述一下 src 与 href 的区别","slug":"简述一下-src-与-href-的区别","link":"#简述一下-src-与-href-的区别","children":[]},{"level":3,"title":"一个页面上有大量的图片（大型电商网站）, 加载很慢, 你有哪些方法优化这些图片的加载, 给用户更好的体验","slug":"一个页面上有大量的图片-大型电商网站-加载很慢-你有哪些方法优化这些图片的加载-给用户更好的体验","link":"#一个页面上有大量的图片-大型电商网站-加载很慢-你有哪些方法优化这些图片的加载-给用户更好的体验","children":[]},{"level":3,"title":"web 开发中会话跟踪的方法有哪些","slug":"web-开发中会话跟踪的方法有哪些","link":"#web-开发中会话跟踪的方法有哪些","children":[]},{"level":3,"title":"HTTP request 报文结构是怎样的","slug":"http-request-报文结构是怎样的","link":"#http-request-报文结构是怎样的","children":[]},{"level":3,"title":"HTTP response 报文结构是怎样的","slug":"http-response-报文结构是怎样的","link":"#http-response-报文结构是怎样的","children":[]},{"level":3,"title":"title 与 h1 的区别、b 与 strong 的区别、i 与 em 的区别","slug":"title-与-h1-的区别、b-与-strong-的区别、i-与-em-的区别","link":"#title-与-h1-的区别、b-与-strong-的区别、i-与-em-的区别","children":[]},{"level":3,"title":"请你谈谈 Cookie 的弊端","slug":"请你谈谈-cookie-的弊端","link":"#请你谈谈-cookie-的弊端","children":[]},{"level":3,"title":"git fetch 和 git pull 的区别","slug":"git-fetch-和-git-pull-的区别","link":"#git-fetch-和-git-pull-的区别","children":[]}]},{"level":2,"title":"CSS 部分","slug":"css-部分","link":"#css-部分","children":[{"level":3,"title":"css sprite 是什么,有什么优缺点","slug":"css-sprite-是什么-有什么优缺点","link":"#css-sprite-是什么-有什么优缺点","children":[]},{"level":3,"title":"display: none;与 visibility: hidden;的区别","slug":"display-none-与-visibility-hidden-的区别","link":"#display-none-与-visibility-hidden-的区别","children":[]},{"level":3,"title":"link 与@import 的区别","slug":"link-与-import-的区别","link":"#link-与-import-的区别","children":[]},{"level":3,"title":"什么是 FOUC?如何避免","slug":"什么是-fouc-如何避免","link":"#什么是-fouc-如何避免","children":[]},{"level":3,"title":"如何创建块级格式化上下文(block formatting context),BFC 有什么用","slug":"如何创建块级格式化上下文-block-formatting-context-bfc-有什么用","link":"#如何创建块级格式化上下文-block-formatting-context-bfc-有什么用","children":[]},{"level":3,"title":"清除浮动的几种方式, 各自的优缺点","slug":"清除浮动的几种方式-各自的优缺点","link":"#清除浮动的几种方式-各自的优缺点","children":[]},{"level":3,"title":"为什么要初始化 CSS 样式?","slug":"为什么要初始化-css-样式","link":"#为什么要初始化-css-样式","children":[]},{"level":3,"title":"css3 有哪些新特性","slug":"css3-有哪些新特性","link":"#css3-有哪些新特性","children":[]},{"level":3,"title":"display 有哪些值？说明他们的作用","slug":"display-有哪些值-说明他们的作用","link":"#display-有哪些值-说明他们的作用","children":[]},{"level":3,"title":"介绍一下标准的 CSS 的盒子模型？低版本 IE 的盒子模型有什么不同的","slug":"介绍一下标准的-css-的盒子模型-低版本-ie-的盒子模型有什么不同的","link":"#介绍一下标准的-css-的盒子模型-低版本-ie-的盒子模型有什么不同的","children":[]},{"level":3,"title":"CSS 优先级算法如何计算？","slug":"css-优先级算法如何计算","link":"#css-优先级算法如何计算","children":[]},{"level":3,"title":"对 BFC 规范的理解","slug":"对-bfc-规范的理解","link":"#对-bfc-规范的理解","children":[]},{"level":3,"title":"谈谈浮动和清除浮动","slug":"谈谈浮动和清除浮动","link":"#谈谈浮动和清除浮动","children":[]},{"level":3,"title":"position 的值, relative 和 absolute 定位原点是","slug":"position-的值-relative-和-absolute-定位原点是","link":"#position-的值-relative-和-absolute-定位原点是","children":[]},{"level":3,"title":"display:inline-block 什么时候不会显示间隙","slug":"display-inline-block-什么时候不会显示间隙","link":"#display-inline-block-什么时候不会显示间隙","children":[]},{"level":3,"title":"::before 和 :after 中双冒号和单冒号 有什么区别？解释一下这 2 个伪元素的作用","slug":"before-和-after-中双冒号和单冒号-有什么区别-解释一下这-2-个伪元素的作用","link":"#before-和-after-中双冒号和单冒号-有什么区别-解释一下这-2-个伪元素的作用","children":[]},{"level":3,"title":"如果需要手动写动画, 你认为最小时间间隔是多久, 为什么","slug":"如果需要手动写动画-你认为最小时间间隔是多久-为什么","link":"#如果需要手动写动画-你认为最小时间间隔是多久-为什么","children":[]},{"level":3,"title":"列出你所知道可以改变页面布局的属性","slug":"列出你所知道可以改变页面布局的属性","link":"#列出你所知道可以改变页面布局的属性","children":[]},{"level":3,"title":"CSS 在性能优化方面的实践","slug":"css-在性能优化方面的实践","link":"#css-在性能优化方面的实践","children":[]},{"level":3,"title":"base64 的原理及优缺点","slug":"base64-的原理及优缺点","link":"#base64-的原理及优缺点","children":[]},{"level":3,"title":"stylus/sass/less 区别","slug":"stylus-sass-less-区别","link":"#stylus-sass-less-区别","children":[]},{"level":3,"title":"postcss 的作用","slug":"postcss-的作用","link":"#postcss-的作用","children":[]},{"level":3,"title":"如何美化 CheckBox","slug":"如何美化-checkbox","link":"#如何美化-checkbox","children":[]},{"level":3,"title":"伪类和伪元素的区别","slug":"伪类和伪元素的区别","link":"#伪类和伪元素的区别","children":[]},{"level":3,"title":"base64 的使用","slug":"base64-的使用","link":"#base64-的使用","children":[]},{"level":3,"title":"请列举几种隐藏元素的方法","slug":"请列举几种隐藏元素的方法","link":"#请列举几种隐藏元素的方法","children":[]},{"level":3,"title":"rgba() 和 opacity 的透明效果有什么不同","slug":"rgba-和-opacity-的透明效果有什么不同","link":"#rgba-和-opacity-的透明效果有什么不同","children":[]},{"level":3,"title":"css 属性 content 有什么作用","slug":"css-属性-content-有什么作用","link":"#css-属性-content-有什么作用","children":[]},{"level":3,"title":"经常遇到的浏览器的 JS 兼容性有哪些？解决方法是什么","slug":"经常遇到的浏览器的-js-兼容性有哪些-解决方法是什么","link":"#经常遇到的浏览器的-js-兼容性有哪些-解决方法是什么","children":[]},{"level":3,"title":"CSS 优化、提高性能的方法有哪些","slug":"css-优化、提高性能的方法有哪些","link":"#css-优化、提高性能的方法有哪些","children":[]},{"level":3,"title":"margin 和 padding 分别适合什么场景使用","slug":"margin-和-padding-分别适合什么场景使用","link":"#margin-和-padding-分别适合什么场景使用","children":[]},{"level":3,"title":"元素竖向的百分比设定是相对于容器的高度吗","slug":"元素竖向的百分比设定是相对于容器的高度吗","link":"#元素竖向的百分比设定是相对于容器的高度吗","children":[]},{"level":3,"title":"全屏滚动的原理是什么？ 用到了 CSS 的那些属性","slug":"全屏滚动的原理是什么-用到了-css-的那些属性","link":"#全屏滚动的原理是什么-用到了-css-的那些属性","children":[]},{"level":3,"title":"什么是响应式设计？响应式设计的基本原理是什么？如何兼容低版本的 I","slug":"什么是响应式设计-响应式设计的基本原理是什么-如何兼容低版本的-i","link":"#什么是响应式设计-响应式设计的基本原理是什么-如何兼容低版本的-i","children":[]},{"level":3,"title":"a 标签上四个伪类的执行顺序是怎么样的","slug":"a-标签上四个伪类的执行顺序是怎么样的","link":"#a-标签上四个伪类的执行顺序是怎么样的","children":[]},{"level":3,"title":"伪元素和伪类的区别和作用","slug":"伪元素和伪类的区别和作用","link":"#伪元素和伪类的区别和作用","children":[]},{"level":3,"title":"::before 和 :after 中双冒号和单冒号有什么区别","slug":"before-和-after-中双冒号和单冒号有什么区别","link":"#before-和-after-中双冒号和单冒号有什么区别","children":[]},{"level":3,"title":"px 和 em 的区别","slug":"px-和-em-的区别","link":"#px-和-em-的区别","children":[]},{"level":3,"title":"如何修改 Chrome 记住密码后自动填充表单的黄色背景","slug":"如何修改-chrome-记住密码后自动填充表单的黄色背景","link":"#如何修改-chrome-记住密码后自动填充表单的黄色背景","children":[]},{"level":3,"title":"水平居中的方法","slug":"水平居中的方法","link":"#水平居中的方法","children":[]},{"level":3,"title":"垂直居中的方法","slug":"垂直居中的方法","link":"#垂直居中的方法","children":[]},{"level":3,"title":"如何使用 CSS 实现硬件加速","slug":"如何使用-css-实现硬件加速","link":"#如何使用-css-实现硬件加速","children":[]},{"level":3,"title":"重绘和回流（重排）是什么, 如何避免","slug":"重绘和回流-重排-是什么-如何避免","link":"#重绘和回流-重排-是什么-如何避免","children":[]},{"level":3,"title":"两种以上方式实现已知或者未知宽度的垂直水平居中","slug":"两种以上方式实现已知或者未知宽度的垂直水平居中","link":"#两种以上方式实现已知或者未知宽度的垂直水平居中","children":[]},{"level":3,"title":"如何实现小于 12px 的字体效果","slug":"如何实现小于-12px-的字体效果","link":"#如何实现小于-12px-的字体效果","children":[]},{"level":3,"title":"CSS 有哪些继承属性","slug":"css-有哪些继承属性","link":"#css-有哪些继承属性","children":[]}]},{"level":2,"title":"JavaScript","slug":"javascript","link":"#javascript","children":[{"level":3,"title":"闭包","slug":"闭包","link":"#闭包","children":[]},{"level":3,"title":"说说你对作用域链的理解","slug":"说说你对作用域链的理解","link":"#说说你对作用域链的理解","children":[]},{"level":3,"title":"JavaScript 原型, 原型链 ? 有什么特点？","slug":"javascript-原型-原型链-有什么特点","link":"#javascript-原型-原型链-有什么特点","children":[]},{"level":3,"title":"请解释什么是事件代理","slug":"请解释什么是事件代理","link":"#请解释什么是事件代理","children":[]},{"level":3,"title":"谈谈 This 对象的理解","slug":"谈谈-this-对象的理解","link":"#谈谈-this-对象的理解","children":[]},{"level":3,"title":"事件模型","slug":"事件模型","link":"#事件模型","children":[]},{"level":3,"title":"new 操作符具体干了什么呢","slug":"new-操作符具体干了什么呢","link":"#new-操作符具体干了什么呢","children":[]},{"level":3,"title":"Ajax 原理","slug":"ajax-原理","link":"#ajax-原理","children":[]},{"level":3,"title":"如何解决跨域问题","slug":"如何解决跨域问题","link":"#如何解决跨域问题","children":[]},{"level":3,"title":"异步加载 JS 的方式有哪些","slug":"异步加载-js-的方式有哪些","link":"#异步加载-js-的方式有哪些","children":[]},{"level":3,"title":"那些操作会造成内存泄漏","slug":"那些操作会造成内存泄漏","link":"#那些操作会造成内存泄漏","children":[]},{"level":3,"title":"说说你对 AMD 和 Commonjs 的理解","slug":"说说你对-amd-和-commonjs-的理解","link":"#说说你对-amd-和-commonjs-的理解","children":[]}]}],"git":{"createdTime":1695191765000,"updatedTime":1722567400000,"contributors":[{"name":"decade","email":"1782976211@qq.com","commits":1},{"name":"wangmaoquan","email":"1782976211@qq.com","commits":1}]},"readingTime":{"minutes":39.59,"words":11878},"filePathRelative":"interview/2.md","localizedDate":"2023年4月12日","excerpt":"<h2>HTML 部分</h2>\\n<h3>前端需要注意哪些 SEO(Search Engine Optimization)</h3>\\n<ul>\\n<li>合理的 <code>title</code>, <code>description</code>, <code>keywords</code>: 搜索引擎对这几个的权重逐渐减少, <code>title</code> 值强调重点即可, 重要关键字出现不要超过两次, 且需要靠前, 不同页面的 <code>title</code> 要不同; <code>description</code> 把页面内容高度概括, 长度合适, 不可过分堆砌关键词, 不同页面的 <code>description</code> 要不同; <code>keywords</code> 列举出重要关键词即可</li>\\n<li>语义化的 <code>HTML</code> 代码, 符合 <code>W3C</code> 规范, 语义化代码让搜索引擎更容易理解网页</li>\\n<li>重要内容 <code>HTML</code> 代码放在最前: 搜索引擎抓取 <code>HTML</code> 顺序是从上往下, 有的搜索引擎对抓取的长度有限制, 保证重要的内容一定会被抓取</li>\\n<li>重要内容不要用 <code>js</code> 输出: 爬虫不会执行 <code>js</code> 获取内容</li>\\n<li>少用 <code>iframe</code>: 搜索引擎不会抓取 <code>iframe</code> 的内容</li>\\n<li>非装饰性图片必须要加 <code>alt</code></li>\\n<li>提高网站速度, 网站速度是搜索引擎排序的一个重要排序</li>\\n</ul>"}');export{o as comp,c as data};
